
import logging
import random
import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

START_DATE = datetime.datetime(2025, 4, 21)
END_DATE = datetime.datetime(2025, 6, 13)

MOTIVATIONAL_QUOTES = [
    "–¢—ã –º–æ–Ω—Å—Ç—Ä —Å–∏–ª—ã! üöÄ",
    "–¢–≤–æ—è —ç–Ω–µ—Ä–≥–∏—è —Ä–∞—Å—Ç–µ—Ç! üî•",
    "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–±–µ–∂–¥–∞—Ç—å! üåü",
    "–®–∞–≥ –∑–∞ —à–∞–≥–æ–º –∫ –ø–æ–±–µ–¥–µ! üèÜ",
    "–°–∏–ª–∞ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–±—è! üí™",
    "–¢—ã –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö! ‚ú®"
]

BONUS_MESSAGES = {
    3: "–ú–∞–ª–µ–Ω—å–∫–∏–π –≥–µ—Ä–æ–π! ü•â 3 –¥–Ω—è –±–µ–∑ —Å–∞—Ö–∞—Ä–∞!",
    7: "–ü–µ—Ä–≤–∞—è –Ω–µ–¥–µ–ª—è ‚Äî –∂–µ–ª–µ–∑–Ω–∞—è –≤–æ–ª—è! ü•à",
    14: "–î–≤–µ –Ω–µ–¥–µ–ª–∏ ‚Äî –∫–∞–∫ —Å–∫–∞–ª–∞! ü•á",
    21: "–¢—Ä–∏ –Ω–µ–¥–µ–ª–∏! –¢—ã –≥–µ—Ä–æ–π! üèÖ",
    30: "–ú–µ—Å—è—Ü –±–µ–∑ —Å–∞—Ö–∞—Ä–∞! –õ–µ–≥–µ–Ω–¥–∞! üèÜ"
}

checkins = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è –±–µ–∑ —Å–∞—Ö–∞—Ä–∞", callback_data='checkin')],
        [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data='progress')],
        [InlineKeyboardButton("–°–∫–æ–ª—å–∫–æ –¥–µ—Ä–∂—É—Å—å", callback_data='time')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–Ω—å –±–µ–∑ —Å–∞—Ö–∞—Ä–∞! –í—ã–±–∏—Ä–∞–π –∫–Ω–æ–ø–∫—É:",
        reply_markup=reply_markup
    )

async def time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    now = datetime.datetime.now()
    delta = now - START_DATE
    remaining = END_DATE - now

    if remaining.total_seconds() <= 0:
        await update.message.reply_text("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —á–µ–ª–µ–Ω–¥–∂ –±–µ–∑ —Å–∞—Ö–∞—Ä–∞! üéâ")
    else:
        days = delta.days
        await update.message.reply_text(
            f"–í—ã –¥–µ—Ä–∂–∏—Ç–µ—Å—å –±–µ–∑ —Å–∞—Ö–∞—Ä–∞ —É–∂–µ {days} –¥–Ω–µ–π! üî•\n"
            f"–î–æ –∫–æ–Ω—Ü–∞ —á–µ–ª–µ–Ω–¥–∂–∞ –æ—Å—Ç–∞–ª–æ—Å—å {remaining.days} –¥–Ω–µ–π."
        )

async def checkin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    today = datetime.datetime.now().date()

    if user_id not in checkins:
        checkins[user_id] = []

    if today in checkins[user_id]:
        await update.message.reply_text("–¢—ã —É–∂–µ —Å–µ–≥–æ–¥–Ω—è –æ—Ç–º–µ—á–∞–ª—Å—è! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üåü")
    else:
        checkins[user_id].append(today)
        streak = calculate_streak(checkins[user_id])
        phrase = random.choice(MOTIVATIONAL_QUOTES)

        bonus_message = ""
        if streak in BONUS_MESSAGES:
            bonus_message = f"\n\n{BONUS_MESSAGES[streak]}"

        await update.message.reply_text(
            f"–û—Ç–ª–∏—á–Ω–æ, {user_name}! {phrase}\n–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: {streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥!{bonus_message}"
        )

async def progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not checkins:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ç–º–µ—á–∞–ª—Å—è.")
        return

    text = "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n"
    for user_id, dates in checkins.items():
        streak = calculate_streak(dates)
        user_name = (await context.bot.get_chat(user_id)).first_name
        text += f"\n{user_name}: {streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥"

    text += f"\n\n–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(checkins)}"
    await update.message.reply_text(text)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    # –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º
    if data == 'checkin':
        update.effective_user = query.from_user
        await checkin(update, context)
    elif data == 'progress':
        update.effective_user = query.from_user
        await progress(update, context)
    elif data == 'time':
        update.effective_user = query.from_user
        await time(update, context)

def calculate_streak(dates):
    if not dates:
        return 0
    dates = sorted(dates)
    streak = 1
    for i in range(len(dates) - 1, 0, -1):
        if (dates[i] - dates[i - 1]).days == 1:
            streak += 1
        else:
            break
    return streak

if __name__ == '__main__':
    app = ApplicationBuilder().token('7410992932:AAFqZR1QNUHBYzdQi5fSXghIDfem-6JRuSw').build()

    app.add_handler(CommandHandler('start', start))
    app.add_handler(CallbackQueryHandler(button))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
